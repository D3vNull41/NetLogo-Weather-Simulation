;==============================
; Procedure: topography-set-globals
; Parameter(s): None
; Description: Initializes global variables defining sea level and suitable height thresholds for wheat fields.
;==============================
to topography-set-globals
  
  ; ensure that the sea-level is correctly set by the user
  if not is-number? sea-level or sea-level >= 1 [ 
    set sea-level 0.2
  ]

  ; Defining the maximum, minimum, and stable suitable height thresholds
  set min-suitable-height-threshold-wheat 0.35
  set max-suitable-height-threshold-wheat 0.6
  set global-temperature 0
end

;==============================
; Procedure: topography-setup-world
; Parameter(s): None
; Description: Generates a topographic map using the random midpoint displacement method, determining land and water patches and placing wheat fields.
;==============================
to topography-setup-world
  ; Here we generate a topographic map using the diamond-square algorithm, a method based on random displacement.
  let pow-size 8    ; This is the power of 2 for the initial size.
  let roughness 1.1 ; This ratio affects displacement to create more natural-looking landscapes.
  
  ; Setting up the initial grid parameters.
  let grid-size (2 ^ pow-size) ; This determines the width of each square and diamond.
  let -grid-size (- grid-size)

  let disp 1                         ; Initial displacement
  let disp-ratio (2 ^ (- roughness)) ; Ratio for displacement change
  let diamond-set 0                  ; Set to store diamond patches
  let square-set 0                   ; Set to store square patches
  
  set diamond-set (patch-set patch 0 0)   ; Initial diamond: center patch
  
  ; Resizing the world, accounting for torus topology.
  resize-world -grid-size  (grid-size - 1) -grid-size  (grid-size - 1)   ; 2^pow-size x 2^pow-size
  set-patch-size round (grid-size * 2 / world-width)  
  
  ; Seeding the PRNG for reproducible topography maps.
  if is-number? seedVal [
    random-seed seedVal mod (2147483647 - 1) ; Ensure the value is within the index range.
  ]
  
  ; Main loop for generating the topographic map.
  while [grid-size >= 1] [
    let diamond-offset map [pos -> list (item 0 pos * grid-size) (item 1 pos * grid-size)] [[-1 1] [1 1] [1 -1] [-1 -1]]
    let square-offset map [pos -> list (item 0 pos * grid-size) (item 1 pos * grid-size)] [[0 -1] [1 0] [0 1] [-1 0]]

    ; Computing squares for diamonds (rows, cols).
    set square-set (patch-set [patches at-points diamond-offset] of diamond-set)
    ; Assigning random height to squares.
    ask square-set [
      let avg mean [height] of patches at-points diamond-offset
      set height (avg + random-uniform disp)
    ]
    
    ; Computing diamonds for squares.
    set diamond-set (patch-set [patches at-points square-offset] of square-set)
    
    ; Assigning random height to diamonds.
    ask diamond-set [
      let avg mean [height] of patches at-points square-offset
      set height (avg + random-uniform disp)
    ]
    
    
    ; Updating step size and displacement for the next iteration.
    set grid-size grid-size / 2
    set disp disp * disp-ratio
  ]
  
  topography-place-landscape ; Deciding whether a patch becomes land or water based on its height.
  ;topography-place-wheat ; Adding wheat fields to suitable places on the topographic map.
  topography-place-soil ; ascertain the soil type that a given patch will become based on its height.
end

;==============================
; Procedure: topography-place-landscape
; Parameter(s): None
; Description: Determines whether each patch becomes land or water based on its height, and sets color accordingly.
;==============================
to topography-place-landscape
  let max-height max [height] of patches
  let min-height min [height] of patches
  
  ; Setting up land and water patches.
  ask patches [
    set height (height - min-height) / (max-height - min-height) ; Normalizing heights to [0,1] range
    
    ; Coloring patches based on sea level.
    ifelse height <= sea-level [
      set pcolor scale-color blue height -.5 1.5
      set pkind "Water"
    ] [
      set pcolor scale-color green height -.5 1.5
      set pkind "Land"
    ]
  ]
end

;==============================
; Procedure: topography-place-wheat
; Parameter(s): None
; Description: Places wheat fields on suitable patches of land.
;==============================
to topography-place-wheat
   ; Defining the size of square regions for the wheat fields.
  let region-size 0.10
  
  ; Placing wheat fields based on square regions.
  ask patches [
    ; Determining the square region for the current patch.
    let region-xcor (pxcor + (world-width / 2)) / region-size
    let region-ycor (pycor + (world-height / 2)) / region-size
    
    ; Defining the size of wheat field pairs.
    let pair-size 0.5
    
    ; Checking if the patch is within a wheat field pair.
    let is-in-pair (abs pxcor mod pair-size = 0) and (abs pycor mod pair-size = 0)
    
    ; Defining the minimum distance between wheat fields.
    let min-distance 0.1
    
    ifelse height >= min-suitable-height-threshold-wheat and height <= max-suitable-height-threshold-wheat and pkind != "Water" [
      ; Checking if the patch is within a wheat field pair and not too close to another pair.
      if is-in-pair and not any? other patches in-radius min-distance with [abs pxcor mod pair-size = 0 and abs pycor mod pair-size = 0 and pkind = "Wheat"] [
        ; Defining the size of the rectangular wheat field.
        let rect-width 5
        let rect-height 10
        
        ; Checking if the patch is within the rectangular wheat field.
        let is-in-rect (abs (pxcor mod rect-width) < rect-width / 2) and (abs (pycor mod rect-height) < rect-height / 2)
        
        if is-in-rect [
          ; Setting the color of patches according to wheat fields.
          set pcolor yellow
          ; Marking the patch as a wheat field.
          set pkind "Wheat"
          ; Setting the region ID for the wheat patch.
          set pregion (word region-xcor "-" region-ycor)
        ]
      ]
    ] [
      ; Setting the region ID for non-wheat patches.
      set pregion ""
    ]
  ]
end

;==============================
; Procedure: topography-place-soil
; Parameter(s): None
; Description: Calls procedures to set soil type and moisture for patches.
;==============================
to topography-place-soil
  topography-set-soil-type
  topography-set-soil-water-content
end

;==============================
; Procedure: topography-set-soil-type
; Parameter(s): None
; Description: Sets the soil type for each patch based on its height.
;==============================
to topography-set-soil-type
  ; Set the soil type of the ground, including ground parameterization.
  ; This simulation limits to Cambisol and Luvisol for temperate climate.
   ask patches [
    ; Set soil type based on height
    ifelse height <= sea-level [
      ; Under the sea level
      set soil-type "Water"
      set soil-properties [0 0 0 4186 0.1 0.96 1.1] ; specially set water due to its not composed out of sand, clay, and silt
      
    ] [
      ifelse height <= sea-level + 0.1 [
        ; Near sea level: Alluvial soil
        set soil-type "Alluvial Soil"
        set soil-properties soil-parametrics 0.40 0.30 0.30 ; example values TODO: replace with real values
      ] [ 
        ifelse height <= sea-level + 0.5 [
          ; Low and medium height: Cambisol
          set soil-type "Cambisol"
          ; Characterization of Cambisol
          set soil-properties soil-parametrics 0.35 0.30 0.35 ; example values TODO: replace with real values
        ] [
          ; Higher ground: Luvisol
          set soil-type "Luvisol"
          set soil-properties soil-parametrics 0.30 0.35 0.35 ; example values TODO: replace with real values
        ]
      ]
    ]  
  ]
end

;==============================
; Procedure: topography-set-soil-water-content
; Parameter(s): None
; Description: Sets the soil water content for each patch.
;==============================
to topography-set-soil-water-content
  ask patches [
    ifelse soil-type = "Water" [
      set soil-water-content 1
    
    ] [
      ifelse soil-type = "Alluvial Soil" [
        set soil-water-content 0.3
      ] [
        ifelse soil-type = "Cambisol" [
          set soil-water-content 0.2
          
        ] [
          set soil-water-content 0.1
        ]
      ]
    ]
  ]
end

;==============================
; Procedure: soil-parametrics
; Parameter(s): sand, clay, silt - the percenteral composition of the soil expressed in sand, clay and silt
; Description: Calculates soil properties based on sand, clay, and silt content.
;==============================
to-report soil-parametrics [sand clay silt]
  ; In order for the parametrization of Cambisol consider the soil composition.
  ; For simplicity only consider sand, clay, and silt.
  
  let parameters [
    [0.5 0.4 0.6]  ; Hydraulic conductivity (sand, clay, silt)
    [0.3 0.2 0.4]  ; Weighted diffusivity (sand, clay, silt)
    [0.7 0.6 0.8]  ; Evaporative ground coefficient (sand, clay, silt)
    [830 878 1350]  ; Heat capacity (sand, clay, silt)
    [0.15 0.3 0.25]  ; Albedo (sand, clay, silt)
    [0.6 0.7 0.85]  ; Emissivity (sand, clay, silt)
    [1.50 1.40 1.60]  ; Density (sand, clay, silt)
  ]
  
  let properties-length length (parameters)  ; Get the number of parameters

  let properties n-values properties-length [i -> 0]  ; Initialize parameter list
  
  ; Calculate soil properties
  foreach (range properties-length) [
    i ->
    ; just focus on sand, clay, and silt... (Groenendyk DG, Ferr√© TP, Thorp KR, Rice AK. Hydrologic-Process-Based Soil Texture Classifications for Improved Visualization of Landscape Function. PLoS One. 2015 Jun 29;10(6):e0131299. doi: 10.1371/journal.pone.0131299. PMID: 26121466; PMCID: PMC4488316.)
    ; P = ùõæ1 * P(sand) + ùõæ2 * P(clay) + ùõæ3 * P(silt)
    let property-value sand * item 0 (item i parameters) + clay * item 1 (item i parameters) + silt * item 2 (item i parameters)
    set properties replace-item i properties property-value
  ]
  
  report properties
end

;==============================
; Procedure: random-uniform
; Parameter(s): x - number indecating the range
; Description: Returns a pseudo-random floating point number in the range [-x;x].
;==============================
to-report random-uniform [x]
  report (random-float 1 - 0.5) * 2 * x
end